name: Build and deploy infrastructure as code to Azure

on:
  push:
    branches:
      - main
    paths:
      - "infra/bicep/**"
      - ".github/workflows/infra-deploy.yml"
  workflow_dispatch:
    inputs:
      teardown:
        description: "Set this to true if you want to deleted the infrastructure deployed in the subscription"
        required: true
        type: boolean

concurrency:
  group: infra-deploy-demo-env
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read
  # push and pull access to GitHub Container Registry
  #packages: write use PAT for read access

env:
  REGISTRY: ghcr.io
  BACKEND_API_IMAGE_NAME: devopsabcs-engineering/tasksmanager-backend-api #azure/tasksmanager-backend-api
  FRONTEND_APP_IMAGE_NAME: devopsabcs-engineering/tasksmanager-frontend-webapp #azure/tasksmanager-frontend-webapp
  BACKEND_PROCESSOR_IMAGE_NAME: devopsabcs-engineering/tasksmanager-backend-processor #azure/tasksmanager-backend-processor

jobs:
  # This job is used for linting the bicep files
  lint:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.teardown != 'true' }}
    name: Lint bicep files
    steps:
      - uses: actions/checkout@v2
      - name: Perform linting
        run: az bicep build --f infra/bicep/main.bicep

  # This job creates the resource group if it does not exist and validates the bicep template
  validate:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.teardown != 'true' }}
    name: Create RG and Validate bicep template
    needs: [lint]
    steps:
      - uses: actions/checkout@v2
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group if does not exist
        uses: azure/CLI@v1
        with:
          inlineScript: |
            if [[ $(az group exists -n ${{ vars.RESOURCE_GROUP }}) == true ]]
            then
              echo "Resource group already exists in the subscription"
            else
              az group create  --name ${{ vars.RESOURCE_GROUP }} --location ${{ vars.LOCATION }}
              echo "Resource group created"
            fi

      - uses: azure/arm-deploy@v1
        name: Run validation
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ vars.RESOURCE_GROUP }}
          region: ${{ vars.LOCATION }}
          template: ./infra/bicep/main.bicep
          parameters: ./infra/bicep/main.parameters.json
          deploymentMode: Validate

  # This job run what-if on the bicep template
  preview:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.teardown != 'true' }}
    needs: [validate]
    name: Run what-if on the bicep template
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - uses: azure/arm-deploy@v1
        name: Run what-if
        with:
          resourceGroupName: ${{ vars.RESOURCE_GROUP }}
          template: ./infra/bicep/main.bicep
          parameters: ./infra/bicep/main.parameters.json containerRegistryName=${{ vars.CONTAINER_REGISTRY_NAME }} backendProcessorServiceImage=${{ env.REGISTRY }}/${{ env.BACKEND_PROCESSOR_IMAGE_NAME }} backendApiServiceImage=${{ env.REGISTRY }}/${{ env.BACKEND_API_IMAGE_NAME }} frontendWebAppServiceImage=${{ env.REGISTRY }}/${{ env.FRONTEND_APP_IMAGE_NAME }}
          additionalArguments: "--what-if --rollback-on-error --what-if-exclude-change-types  Ignore"

  # This job creates ACR and imports images from GitHub Container Registry if configured. If ACR already exists but not in same resource group, it will fail the workflow
  create-acr:
    runs-on: ubuntu-latest
    name: Create ACR and import images from GitHub Container Registry if configured
    if: ${{ vars.CONTAINER_REGISTRY_NAME != '' }}
    needs: [preview]
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Create ACR ${{ vars.CONTAINER_REGISTRY_NAME }} if does not exist
        uses: azure/CLI@v1
        with:
          inlineScript: |
            if [[ $(az acr check-name -n ${{ vars.CONTAINER_REGISTRY_NAME }}  -o tsv --query "nameAvailable") == false ]]
            then
              echo "ACR already exists."
              if [[ $(az acr list -g ${{ vars.RESOURCE_GROUP }} -o tsv --query "[?name=='${{ vars.CONTAINER_REGISTRY_NAME }}']") == "" ]]
              then
                echo "ACR exists but not in the resource group ${{ vars.RESOURCE_GROUP }}. Please select a different name for the ACR and update in repository variable."
                echo "::error title=Not Unique ACR::ACR exists but not in the resource group ${{ vars.RESOURCE_GROUP }}. Please select a different name for the ACR and update in repository variable."
                exit 1
              fi
            else
              az acr create --name ${{ vars.CONTAINER_REGISTRY_NAME }} --resource-group ${{ vars.RESOURCE_GROUP }} --sku Basic --location ${{ vars.LOCATION }}
              # enable admin account for ACR
              az acr update -n ${{ vars.CONTAINER_REGISTRY_NAME }} --admin-enabled true
              echo "ACR created"
            fi
      # login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_API_IMAGE_NAME }}:latest
          # tag the image with the ACR name
          docker tag ${{ env.REGISTRY }}/${{ env.BACKEND_API_IMAGE_NAME }}:latest ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-api:latest
          # tag the image with the ACR name with the sha
          docker tag ${{ env.REGISTRY }}/${{ env.BACKEND_API_IMAGE_NAME }}:latest ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-api:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_PROCESSOR_IMAGE_NAME }}:latest
          # tag the image with the ACR name
          docker tag ${{ env.REGISTRY }}/${{ env.BACKEND_PROCESSOR_IMAGE_NAME }}:latest ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-processor:latest
          # tag the image with the ACR name with the sha
          docker tag ${{ env.REGISTRY }}/${{ env.BACKEND_PROCESSOR_IMAGE_NAME }}:latest ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-processor:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_APP_IMAGE_NAME }}:latest
          # tag the image with the ACR name
          docker tag ${{ env.REGISTRY }}/${{ env.FRONTEND_APP_IMAGE_NAME }}:latest ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-frontend-webapp:latest
          # tag the image with the ACR name with the sha
          docker tag ${{ env.REGISTRY }}/${{ env.FRONTEND_APP_IMAGE_NAME }}:latest ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-frontend-webapp:${{ github.sha }}
      - uses: azure/docker-login@v2
        name: Login to ACR
        if: false
        with:
          login-server: ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io
          username: ${{ vars.CONTAINER_REGISTRY_NAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-processor:latest
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-processor:${{ github.sha }}
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-api:latest
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-api:${{ github.sha }}
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-frontend-webapp:latest
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-frontend-webapp:${{ github.sha }}
        if: false
        name: Push images to ACR
      # Import images from GitHub Container Registry
      - name: Import images from GitHub Container Registry
        if: true
        uses: azure/CLI@v1
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        with:
          inlineScript: |
            # enable admin account for ACR
            echo "Enabling admin account for ACR"
            az acr update -n ${{ vars.CONTAINER_REGISTRY_NAME }} --admin-enabled true
            # get the ACR login server password
            echo "Getting ACR login server password"
            ACR_PASSWORD=$(az acr credential show --name ${{ vars.CONTAINER_REGISTRY_NAME }} --query "passwords[0].value" -o tsv)
            echo "ACR password: $ACR_PASSWORD"
            # set acr password as secret using GitHub API
            echo "Setting ACR password as secret in GitHub"
            variableName="ACR_PASSWORD"
            Write-Host "Creating secret $variableName in repository ${{env.OWNER}}/${{env.REPO}}"
            gh secret set $variableName --repo "${{env.OWNER}}/${{env.REPO}}" --body "$ACR_PASSWORD"

      # docker login to ACR using the ACR password secret
      - name: Docker login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io
          username: ${{ vars.CONTAINER_REGISTRY_NAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - run: |
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-processor:latest
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-processor:${{ github.sha }}
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-api:latest
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-api:${{ github.sha }}
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-frontend-webapp:latest
          docker push ${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-frontend-webapp:${{ github.sha }}
          #az acr import --name ${{ vars.CONTAINER_REGISTRY_NAME }} --source ${{ env.REGISTRY }}/${{ env.BACKEND_PROCESSOR_IMAGE_NAME }}:latest --image tasksmanager/tasksmanager-backend-processor --force
          #az acr import --name ${{ vars.CONTAINER_REGISTRY_NAME }} --source ${{ env.REGISTRY }}/${{ env.BACKEND_API_IMAGE_NAME }}:latest --image tasksmanager/tasksmanager-backend-api --force
          #az acr import --name ${{ vars.CONTAINER_REGISTRY_NAME }} --source ${{ env.REGISTRY }}/${{ env.FRONTEND_APP_IMAGE_NAME }}:latest --image tasksmanager/tasksmanager-frontend-webapp --force
        name: Import images to ACR
  # This job deploys the bicep template to Azure subscription using ACR images
  deploy-with-acr-images:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.teardown != 'true' }}
    needs: [create-acr]
    name: Deploy to Azure subscription with ACR
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - uses: azure/arm-deploy@v1
        id: deployment-with-acr-images
        name: Deploy to Azure subscription
        with:
          deploymentName: "github-${{ github.run_number }}"
          resourceGroupName: ${{ vars.RESOURCE_GROUP }}
          region: ${{ vars.LOCATION }}
          template: ./infra/bicep/main.bicep
          parameters: ./infra/bicep/main.parameters.json containerRegistryName=${{ vars.CONTAINER_REGISTRY_NAME }} backendProcessorServiceImage=${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-processor:latest backendApiServiceImage=${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-backend-api:latest frontendWebAppServiceImage=${{ vars.CONTAINER_REGISTRY_NAME }}.azurecr.io/tasksmanager/tasksmanager-frontend-webapp:latest
          failOnStdErr: false

  # This job deploys the bicep template to Azure subscription using GitHub Container Registry images
  deploy-with-ghcr-images:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.teardown != 'true' && vars.CONTAINER_REGISTRY_NAME == '' }}
    needs: [preview]
    name: Deploy to Azure subscription with GHCR
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - uses: azure/arm-deploy@v1
        id: deployment-with-ghcr-images
        name: Deploy to Azure subscription
        with:
          deploymentName: "github-${{ github.run_number }}"
          resourceGroupName: ${{ vars.RESOURCE_GROUP }}
          region: ${{ vars.LOCATION }}
          template: ./infra/bicep/main.bicep
          parameters: ./infra/bicep/main.parameters.json containerRegistryName= backendProcessorServiceImage=${{ env.REGISTRY }}/${{ env.BACKEND_PROCESSOR_IMAGE_NAME }}:latest backendApiServiceImage=${{ env.REGISTRY }}/${{ env.BACKEND_API_IMAGE_NAME }}:latest frontendWebAppServiceImage=${{ env.REGISTRY }}/${{ env.FRONTEND_APP_IMAGE_NAME }}:latest
          failOnStdErr: false

  # This job deletes the resource group created by the workflow and can only be triggered by the workflow dispatch event.
  teardown:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.teardown == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Delete Resource Group if exist
        uses: azure/CLI@v1
        with:
          inlineScript: |
            if [[ $(az group exists -n ${{ vars.RESOURCE_GROUP }}) == true ]]
            then
              echo "Resource group exists. Deleting..."
               az group delete -n ${{ vars.RESOURCE_GROUP }} --yes
            else
              echo "Resource group does not exist in the subscription. Nothing to delete."
            fi
